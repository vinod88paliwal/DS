Quest 1: What is the difference between DELETE and TRUNCATE statement in SQL?
Ans : 
				DELETE														TRUNCATE
1)	DELETE is a DML command.									     TRUNCATE is a DDL command.
2)	We can use WHERE clause in DELETE command.					     We cannot use WHERE clause with TRUNCATE
3)	DELETE statement is used to delete a row/rows from a table. 	 TRUNCATE statement is used to remove all the rows from a 
																	 table.
4)	DELETE is slower than TRUNCATE statement.						 TRUNCATE statement is faster than DELETE statement.
5)	You can rollback data after using DELETE statement.			     It is not possible to rollback after using TRUNCATE statement.
Syntax--> DELETE FROM table_name [WHERE condition];					Syntax-->TRUNCATE TABLE table_name;  
Example--> DELETE FROM employee where empId=10;  or					Example-->TRUNCATE TABLE employee; 
		   DELETE FROM employee; 

DROP : DROP command is used to remove an object from the database. If you drop a table, all the rows in the table is deleted and the table structure is also removed from the database.
       Once a table is dropped we cannot get it back (cannot rollback), so be careful while using DROP command. When a table is dropped all the references to the table will not be valid.

Syntax-- > DROP TABLE table_name;    Example--> DROP TABLE employee;


Quest 2: What are the various Oracle database objects?
Ans : 
Tables: This is a set of elements organized in vertical and horizontal fashion.
Tablespaces: This is a logical storage unit in Oracle.
Views: It is virtual table derived from one or more tables.
Indexes: This is a performance tuning method to process the records.
Synonyms: This is a name for tables.

Quest : Primary Key ?

Quest : Foreign Key ?

Quest : Find duplicate records ?
Ans : SELECT EMP_ID,EMP_NAME,SALARY FROM DUPRECORDS GROUP BY EMP_ID,EMP_NAME,SALARY HAVING COUNT(EMP_ID)>1; 

Quest : Find non - duplicate or unique records ?
Ans : SELECT * FROM EMPLOYEE WHERE ID NOT IN ( SELECT id FROM EMPLOYEE group by id,name,salary having count(id)>1 );

Quest : Delete duplicate record ? (one coloum, two column cobination )?
DELETE FROM duprecords  A WHERE ROWID > ( SELECT min(rowid) FROM duprecords  B  WHERE A.EMP_ID = B.EMP_ID ); -->  Delete all rowids that is BIGGER than the 
                                                                                                                  SMALLEST rowid value (for a given key).
				OR
DELETE FROM duprecords WHERE rowid not in(SELECT MIN(rowid) FROM duprecords GROUP BY EMP_ID);
		
Quest : 1st, 2nd and Nth highest Salary ?

2nd highest Salary -- > select max(sal) from emp where sal<(select max(sal) from emp)
				   -->  select max(sal) from emp where sal not in (select max(sal) from emp) 	


SELECT  Emp1.Salary FROM duprecords Emp1
WHERE (N-1) = ( SELECT COUNT(DISTINCT(Emp2.Salary))
FROM duprecords Emp2 WHERE Emp2.Salary > Emp1.Salary);

select sal from (
				 (select distinct sal from emp where rownum<=&n order by sal desc ) 
			   ) where rownum <=1 order by sal


----------------------------------------------------------------------------------------------
Update Male with Female and wise versa -->
--------------------------------------------
UPDATE employee SET Gender =(CASE WHEN Gender = 'F' THEN 'M' ELSE 'F' END);


Quest : Joins ?
Ans : Oracle JOINS are used to retrieve data from multiple tables. An Oracle JOIN is performed whenever two or more tables are joined in a SQL statement.
There are 4 different types of Oracle joins:
     INNER JOIN (or sometimes called Simple join)
     LEFT OUTER JOIN (or sometimes called LEFT JOIN)
     RIGHT OUTER JOIN (or sometimes called RIGHT JOIN)
     FULL OUTER JOIN (or sometimes called FULL JOIN)

supplier_id 	supplier_name
10000 			IBM
10001 			Hewlett Packard
10002 			Microsoft
10003 			NVIDIA

order_id 	supplier_id 	order_date
500125 			10000 		2003/05/12
500126 			10001 		2003/05/13
500127 			10004 		2003/05/14	

INNER JOIN (simple join) : INNER JOINS return all rows from multiple tables where the join condition is met.
--------------------------
SELECT suppliers.supplier_id, suppliers.supplier_name, orders.order_date
FROM suppliers
INNER JOIN orders
ON suppliers.supplier_id = orders.supplier_id;

Old Syntax:
SELECT suppliers.supplier_id, suppliers.supplier_name, orders.order_date
FROM suppliers, orders
WHERE suppliers.supplier_id = orders.supplier_id;

Output :
supplier_id 	name 		order_date
10000		 	IBM 			2003/05/12
10001 		Hewlett Packard 	2003/05/13

LEFT OUTER JOIN:--> all rows from the LEFT-hand table specified in the ON condition and only those rows from the other table where the joined fields are equal (join condition is met).
----------------     
	
SELECT suppliers.supplier_id, suppliers.supplier_name, orders.order_date
FROM suppliers
LEFT OUTER JOIN orders
ON suppliers.supplier_id = orders.supplier_id;	

RIGHT OUTER JOIN : --> This type of join returns all rows from the RIGHT-hand table specified in the ON condition and only those rows from the other table where the joined fields are equal (join condition is met).
------------------     

SELECT orders.order_id, orders.order_date, suppliers.supplier_name
FROM suppliers
RIGHT OUTER JOIN orders
ON suppliers.supplier_id = orders.supplier_id;

FULL OUTER JOIN :--> The Oracle FULL OUTER JOIN would return the all records from both tables.
----------------
SELECT suppliers.supplier_id, suppliers.supplier_name, orders.order_date
FROM suppliers
FULL OUTER JOIN orders
ON suppliers.supplier_id = orders.supplier_id;

Self Join :--> A Self Join is used to join a table to itself, particularly when the table has a FOREIGN KEY that references 
-------------  its own PRIMARY KEY. It is necessary to ensure that the join statement defines an alias for both copies of the table to avoid column ambiguity. 

SELECT a.sales_person_id, a.name, a.manager_id, b.sales_person_id, b.name
FROM sales_person a, sales_person b
WHERE a.manager_id = b.sales_person_id; 


UNION Operator :--> The Oracle UNION operator is used to combine the result sets of 2 or more Oracle SELECT statements. It removes duplicate rows between the various SELECT statements.
---------------     Each SELECT statement within the UNION operator must have the same number of fields in the result sets with similar data types.

SELECT supplier_id
FROM suppliers
UNION
SELECT supplier_id
FROM order_details;

GROUP BY & HAVING==>
--------------------
Find Employee Name if any of the employees has more than 1 Skill.
SELECT E.ENAME, COUNT(SKILL) NoOfSkills FROM EMPLOYEES E INNER JOIN SKILLS S ON E.EID = S.EID GROUP BY ENAME,SKILL HAVING COUNT(SKILL)>1 ;


GROUP BY & HAVING & WHERE ==>
--------------------------
Find Employee Id and Name if any of the employees name is ABC and has more than 1 Skill.

SELECT E.EID, E.ENAME, COUNT(SKILL) NoOfSkills FROM EMPLOYEES E INNER JOIN SKILLS S ON E.EID = S.EID 
WHERE ENAME = 'ABC'
GROUP BY ENAME , E.EID  HAVING COUNT(SKILL)>1 ;


UNION ALL :--> UNION ALL to select all (duplicate values also) German cities from the "Customers" and "Suppliers" tables:
-----------
SELECT City, Country FROM Customers
WHERE Country='Germany'
UNION ALL
SELECT City, Country FROM Suppliers
WHERE Country='Germany'
ORDER BY City;

MINUS Operator:-> The Oracle MINUS operator is used to return all rows in the first SELECT statement that are not returned in the second SELECT statement.
----------------  
Example--> 

SELECT supplier_id
FROM suppliers
MINUS
SELECT supplier_id
FROM orders;

This Oracle MINUS example returns all supplier_id values that are in the suppliers table and not in the orders table. What this means is that if a supplier_id value existed in the suppliers table and also existed in the orders table, the supplier_id value would not appear in this result set.

---------------------------------------------------------

Cursor--> A cursor holds the rows (one or more) returned by a SQL statement. The set of rows the cursor holds is referred to as the active set.
--------  
An explicit cursor should be defined in the declaration section of the PL/SQL Block. It is created on a SELECT Statement which returns more than one row. 

Syntax-->  CURSOR cursor_name IS select_statement;

Working with an explicit cursor involves four steps:
# Declaring the cursor for initializing in the memory
# Opening the cursor for allocating memory
# Fetching the cursor for retrieving data
# Closing the cursor to release allocated memory

Example--> 
DECLARE
   c_id customers.id%type;
   c_name customers.name%type;
   c_addr customers.address%type;
 
 CURSOR C1 IS  SELECT id, name, address FROM customers;

 BEGIN
   OPEN C1;
   LOOP
      FETCH C1 into c_id, c_name, c_addr;
      EXIT WHEN C1%notfound;
      dbms_output.put_line(c_id || ' ' || c_name || ' ' || c_addr);
   END LOOP;
   CLOSE C1;
END;
/

			OR
We can declare variable of Cursor C1 type and can store the row/rows in that variable for further use in business logic.
Example--> INSERT_INTO_SHIPMENT_ATTRIBUTE.sql

DECLARE
		CURSOR C1 IS  SELECT id, name, address FROM customers;
		REC C1%ROWTYPE;
BEGIN
   OPEN C1;
   LOOP
      FETCH C1 into REC;
      EXIT WHEN C1%NOTFOUND;
	  
       DBMS_OUTPUT.PUT_LINE(REC.id || ' ' || REC.name || ' ' || REC.address);
   END LOOP;
   CLOSE C1;
END;


------------------------------------------------------------------------------------
Anonymous Block --> An anonymous block is a PL/SQL program unit that has no name. An anonymous block consists of an optional -----------------   declarative part, an executable part, and one or more optional exception handlers.
Refer -->SO_CANCEL_PROC.sql

Syntax : -->
-----------
DECLARE
    <variable name> <data type><(length precision)>;
BEGIN
     <valid statement>;
EXCEPTION
  <exception handler>;
END;
/

Example1-->
----------
set serveroutput on

DECLARE
 counter NUMBER(10,8) := 2;
 pi      NUMBER(8,7) := 3.1415926;
 test    NUMBER(10,8) NOT NULL := 10;
BEGIN
  counter := pi/counter;
  pi := pi/3;
  dbms_output.put_line(counter);
  dbms_output.put_line(pi);
END;
/

Example2-->
-----------
DECLARE
	v_tc_order_id  PURCHASE_ORDERS_LINE_ITEM.tc_purchase_orders_id%TYPE;
	v_do_id NUMBER;
BEGIN
	 FOR POLINEDATA IN (SELECT PURCHASE_ID,ORDER_QTY FROM PURCHASE_ORDERS_LINE_ITEM WHERE IS_DELETED=0)
    LOOP
            v_po_line_id := POLINEDATA.PURCHASE_ORDERS_LINE_ITEM_ID;
            Dbms_Output.Put_Line('POLineId : '||v_po_line_id);
         
          UPDATE PURCHASE_ORDERS_LINE_ITEM SET PURCHASE_ORDERS_LINE_STATUS=940 WHERE PURCHASE_ORDERS_LINE_ITEM_ID=v_po_line_id;
	END LOOP;  
EXCEPTION
    When No_Data_Found Then
       DBMS_OUTPUT.PUT_LINE ('No Data found for SELECT on ' || v_tc_order_id || SUBSTR(SQLERRM, 1, 200));
     ROLLBACK;
END;
/		  
Note: If you test this block using SQL*Plus, then enter the statement SET SERVEROUTPUT ON so that output using the DBMS_OUTPUT procedures (for example, PUT_LINE) is activated. Also, end the example with a slash (/) to activate it.


------------------------------------------------------------
Stored Procedure : --> A stored procedure is a sequence of statement or a named PL/SQL block which performs one or more --------------------   specific action . It is stored as schema object. 
A procedure is similar to an anonymous PL/SQL Block but it is named for repeated usage.

Stored Procedure following three parts:-->

1. Declarative Part:-->
It is an optional part. However, the declarative part for a subprogram does not start with the DECLARE keyword. It contains declarations of types, cursors, constants, variables, exceptions, and nested subprograms. These items are local to the subprogram and cease to exist when the subprogram completes execution.

2.Executable Part:-->
This is a mandatory part and contains statements that perform the designated action.

3. Exception-handling:-->
This is again an optional part. It contains the code that handles run-time errors.

When you create a procedure or function, you may define parameters. There are three types of parameters that can be declared:
IN -     The parameter can be referenced by the procedure or function. The value of the parameter can not be overwritten by   
         the procedure or function (It behaves as constant in procedure/function).
OUT -    The parameter can not be referenced by the procedure or function, but the value of the parameter can be overwritten by 
         the procedure or function.
IN OUT - The parameter can be referenced by the procedure or function and the value of the parameter can be overwritten by the 
         procedure or function.
	
Syntax : --> Note: optional part is written in [].
------
CREATE [OR REPLACE] PROCEDURE procedure_name (arg1 data_type, ...)

IS
    [declaration_section]

BEGIN
    executable_section

[EXCEPTION
    exception_section]

END [procedure_name];

Example1:--> Simple Procedure
-------
CREATE OR REPLACE PROCEDURE remove_emp (employee_id NUMBER) AS
   tot_emps NUMBER;
   BEGIN
      DELETE FROM employees
      WHERE employees.employee_id = remove_emp.employee_id;
   tot_emps := tot_emps - 1;
   END;
/

Example2:--> Simple Procedure
---------
CREATE OR REPLACE PROCEDURE SHIPMENT_DETAILS
IS 
	CURSOR C1 IS SELECT SHIPMENT_ID FROM SHIPMENT WHERE TC_SHIPMENT_ID IN( SELECT TC_SHIPMENT_ID FROM TEMP_CA );
	REC C1%ROWTYPE;
	V_NO_OF_SHIPMENTS  NUMBER(10);

BEGIN
	V_NO_OF_SHIPMENTS:=0;

OPEN C1;
LOOP
FETCH C1 INTO REC;
EXIT WHEN C1%NOTFOUND;

    INSERT INTO SHIPMENT_ATTRIBUTE (SHIPMENT_ID,ATTRIBUTE_NAME,ATTRIBUTE_SEQ,ATTRIBUTE_VALUE)
   VALUES(REC.SHIPMENT_ID, 'Invoiced_outside_TMS',(SELECT MAX(ATTRIBUTE_SEQ)+1 FROM SHIPMENT_ATTRIBUTE  WHERE SHIPMENT_ID = REC.SHIPMENT_ID), 'true');
   
    DBMS_OUTPUT.PUT_LINE('SHIPMENTS ID: ' || REC.SHIPMENT_ID);
    V_NO_OF_SHIPMENTS:=V_NO_OF_SHIPMENTS+1;
    
   IF(V_NO_OF_SHIPMENTS = 1000)    
   THEN
      COMMIT;
      V_NO_OF_SHIPMENTS:=0;
    END IF;

END LOOP;
COMMIT;
CLOSE C1;
EXCEPTION
WHEN NO_DATA_FOUND THEN
NULL;
END;  
/

NOTE: In the examples given above, we are using backward slash ‘/’ at the end of the program. This indicates the oracle engine that the PL/SQL program has ended and it can begin processing the statements.

Procedure Calling:-->
-----------------
Syntax--> EXECUTE or [EXEC] procedure_name;  Example--> EXEC remove_emp;
	
Drop Procedure :-->
---------------
Syntax--> DROP PROCEDURE procedure_name;   Example--> DROP PROCEDURE remove_emp;

------------------------------------------------------------------------

Function :--> A PL/SQL function is same as a procedure except that it returns a value.
-----------
# The optional parameter list contains name, mode and types of the parameters. IN represents that value will be passed from outside and OUT represents that this parameter will be used to return a value outside of the procedure.
# The function must contain a return statement.
# RETURN clause specifies that data type you are going to return from the function.
# function-body contains the executable part.
# The AS keyword is used instead of the IS keyword for creating a standalone function.

CREATE OR REPLACE FUNCTION totalCustomers
RETURN number IS
   total number(2) := 0;
BEGIN
   SELECT count(*) into total
   FROM customers;
   
   RETURN total;
END;
/

Calling a Function :-->
------------------
DECLARE
   c number(2);
BEGIN
   c := totalCustomers();
   dbms_output.put_line('Total no. of Customers: ' || c);
END;
/

# We can refer above PROCEDURE code also for writing FUNCTION. 

----------------------------------------------------------------------------

Triggers:-->
-----------
Triggers are stored programs, which are automatically executed or fired when some events occur. Triggers are, in fact, written to be executed in response to any of the following events:

#  A database manipulation (DML) statement (DELETE, INSERT, or UPDATE).
#  A database definition (DDL) statement (CREATE, ALTER, or DROP).
#  A database operation (SERVERERROR, LOGON, LOGOFF, STARTUP, or SHUTDOWN).

Triggers could be defined on the table, view with which the event is associated. 

Benefits of Triggers:-->
----------------------
# Auditing
# Event logging and storing information on table access
# Enforcing referential integrity
# Many more....

Note : Oracle transactions are atomic. No commit or rollback are allowed in a trigger.
	   You can update only the :NEW values in BEFORE INSERT or UPDATE or DELETE but not :OLD.
       You can not update neither :NEW or nor :OLD values in AFTER INSERT or UPDATE or DELETE.
	   
Example-->

CREATE OR REPLACE TRIGGER orders_after_insert
AFTER INSERT ON orders
   
   FOR EACH ROW
   
DECLARE
   v_username varchar2(10);
   
BEGIN
   
   -- Find username of person performing the INSERT into the table
   SELECT user INTO v_username FROM dual;
   
   -- Insert record into audit table
   INSERT INTO orders_audit ( order_id, quantity, cost_per_item, total_cost, username )
   VALUES
     ( :new.order_id, :new.quantity, :new.cost_per_item, :new.total_cost, v_username );

END;

Drop Trigger :-->
----------------
Syntax--> DROP TRIGGER trigger_name;    Example--> DROP TRIGGER orders_before_insert;

Enable Trigger:-->
-------------------------
Syntax--> ALTER TRIGGER trigger_name ENABLE;   Example--> ALTER TRIGGER orders_before_insert ENABLE;
Syntax--> ALTER TABLE table_name ENABLE ALL TRIGGERS;  Example--> ALTER TABLE orders ENABLE ALL TRIGGERS;

Disable Trigger:-->
----------------
Syntax--> ALTER TRIGGER trigger_name DISABLE;   Example--> ALTER TRIGGER orders_before_insert DISABLE;
Syntax--> ALTER TABLE table_name DISABLE ALL TRIGGERS;  Example--> ALTER TABLE orders DISABLE ALL TRIGGERS;


----------------------------------------------------------------------------------------------------------------

Normalization:
-------------
Here are the most commonly used normal forms:

    First normal form(1NF)
    Second normal form(2NF)
    Third normal form(3NF)
    Boyce & Codd normal form (BCNF)


First normal form (1NF) : As per the rule of first normal form, an attribute (column) of a table cannot hold multiple values.It should hold only atomic values.	
	
emp_id 	emp_name 	emp_address 	emp_mobile
101 	Herschel 	New Delhi 		8912312390

102 	Jon 	    Kanpur      	8812121212
									9900012222
Employees Jon  having two mobile numbers so the company stored them in the same field as you can see in the table above.
This table is not in 1NF as the rule says “each attribute of a table must have atomic (single) values”,									

Solution with 1NF : 

emp_id 	emp_name 	emp_address 	emp_mobile

102 	Jon 	    Kanpur      	8812121212
102 	Jon 	    Kanpur      	9900012222


Second normal form (2NF):
-------------------------
A table is said to be in 2NF if both the following conditions hold:

    Table is in 1NF (First normal form)
    No non-prime attribute is dependent on the proper subset of any candidate key of table.
An attribute that is not part of any candidate key is known as non-prime attribute.

teacher_id 		subject 	teacher_age
111 			Maths 		38
111 			Physics 	38
222 			Biology 	38
333 			Physics 	40
333 			Chemistry 	40

To make the table complies with 2NF we can break it in two tables like this:
teacher_details table and teacher_subject table

Third Normal form (3NF) : 
----------------------
Suppose a company wants to store the complete address of each employee, they create a table named employee_details that looks like this:
emp_id 	emp_name 	emp_zip 	emp_state 	emp_city 	emp_district 
 
Candidate Keys: {emp_id}
Non-prime attributes: all attributes except emp_id are non-prime as they are not part of any candidate keys.

Here, emp_state, emp_city & emp_district dependent on emp_zip. And, emp_zip is dependent on emp_id that makes non-prime attributes (emp_state, emp_city & emp_district) transitively dependent on super key (emp_id). This violates the rule of 3NF.


To make this table complies with 3NF we have to break the table into two tables to remove the transitive dependency: 

employee table:==> 		emp_id 	emp_name 	emp_zip 
employee_zip table:==>  emp_zip 	emp_state 	emp_city 	emp_district














	
	


